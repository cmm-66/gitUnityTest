//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Simple"",
            ""id"": ""252e107a-152a-4c59-8c27-4c06a88c15e4"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""db264f61-88a6-4c8f-8d12-6a2e563cd5ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""37c65cc8-8b75-4146-89b0-58f89d6f457c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""07d58d7e-16c4-403d-a993-9ef0ac332d27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""5b703e2b-f679-4a71-9286-ed9aba523581"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""9ec4e555-2485-4492-9b32-67c25707b5fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""97d02b80-bec7-40c2-af16-fb8a162d9b72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6ffe1be9-6c57-4dfa-b8dc-3b779cf62b35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ea1e22e-3604-4c8c-a4eb-502eabb756c1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c749a5e1-222b-47b0-81a9-cd3ee6e8dbee"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cff27b56-0d23-4f76-9b79-eb6b0cb26669"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc606ac7-2029-4865-af5f-89a490f7dbcf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dacd8bc4-00b0-4e4b-9cb7-12499f827459"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6016b3e-b329-42f8-9fcd-a8aa6c8ab870"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd025f5f-65c7-4f56-a00d-998e082805e0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Simple
        m_Simple = asset.FindActionMap("Simple", throwIfNotFound: true);
        m_Simple_Up = m_Simple.FindAction("Up", throwIfNotFound: true);
        m_Simple_Down = m_Simple.FindAction("Down", throwIfNotFound: true);
        m_Simple_Left = m_Simple.FindAction("Left", throwIfNotFound: true);
        m_Simple_Right = m_Simple.FindAction("Right", throwIfNotFound: true);
        m_Simple_Attack = m_Simple.FindAction("Attack", throwIfNotFound: true);
        m_Simple_Block = m_Simple.FindAction("Block", throwIfNotFound: true);
        m_Simple_Jump = m_Simple.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Simple
    private readonly InputActionMap m_Simple;
    private ISimpleActions m_SimpleActionsCallbackInterface;
    private readonly InputAction m_Simple_Up;
    private readonly InputAction m_Simple_Down;
    private readonly InputAction m_Simple_Left;
    private readonly InputAction m_Simple_Right;
    private readonly InputAction m_Simple_Attack;
    private readonly InputAction m_Simple_Block;
    private readonly InputAction m_Simple_Jump;
    public struct SimpleActions
    {
        private @Controls m_Wrapper;
        public SimpleActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Simple_Up;
        public InputAction @Down => m_Wrapper.m_Simple_Down;
        public InputAction @Left => m_Wrapper.m_Simple_Left;
        public InputAction @Right => m_Wrapper.m_Simple_Right;
        public InputAction @Attack => m_Wrapper.m_Simple_Attack;
        public InputAction @Block => m_Wrapper.m_Simple_Block;
        public InputAction @Jump => m_Wrapper.m_Simple_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Simple; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SimpleActions set) { return set.Get(); }
        public void SetCallbacks(ISimpleActions instance)
        {
            if (m_Wrapper.m_SimpleActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnRight;
                @Attack.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnAttack;
                @Block.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnBlock;
                @Jump.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_SimpleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public SimpleActions @Simple => new SimpleActions(this);
    public interface ISimpleActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
